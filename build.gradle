import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'com.github.johnrengelman.shadow' version '7.0.0' // id("com.github.johnrengelman.shadow") version "7.0.0"
    id 'maven-publish'
}

group 'de.MarkusTieger'
version '1.22.0'

String dependencyOS = System.getProperty("os.name")
String dependencyArch = System.getProperty("os.arch")

boolean overwrite = false;

if(System.getProperty("os.linux") != null){
    System.setProperty("os.name", "Linux")
    System.setProperty("os.arch", "amd64")
    System.setProperty("os.version", "5.13.0-37")

    overwrite = true;

    System.out.println("Updated OS to Linux for Build")
}

swt(dependencyOS, dependencyArch, overwrite)



String env = System.getenv("build_number");
String commit = System.getenv("commit_hash");

if (env != null) {
    while (env.length() < 6) {
        env = "0" + env
    }
    System.out.println("::set-output name=build_number::" + env)
}

if (env == null) env = "-";
if (commit == null) commit = "-";

String fullVersion = this.getVersion()
if (!env.equalsIgnoreCase("-")) {
    fullVersion = fullVersion + "-" + env;
}
if (!commit.equalsIgnoreCase("-")) {
    fullVersion = fullVersion + "-" + commit;
}

System.out.println("::set-output name=release::" + getVersion())

String user = findProperty("github.username")
if (user == null) user = System.getenv("gituser")
String pwd = findProperty("github.token")
if (pwd == null) pwd = System.getenv("gitpwd")

repositories {
    mavenCentral()
    // mavenLocal()
    maven {
        name = "Github-API"
        url = uri("https://maven.pkg.github.com/TigerSystems/tigxa-api")
        credentials {
            username = user
            password = pwd
        }
    }

    maven {
        name = "Github-Events"
        url = uri("https://maven.pkg.github.com/TigerSystems/tigxa-events")
        credentials {
            username = user
            password = pwd
        }
    }
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'de.MarkusTieger.Tigxa'
    mainClass = 'de.MarkusTieger.Tigxa.bootstrap.Bootstrap'
}

javafx {
    version = '17'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing']

}

jar {
    manifest {
        attributes 'Name': 'de/markustieger/tigxa/'
        attributes 'Specification-Title': "Tigxa"
        attributes 'Specification-Version': getVersion()
        attributes 'Specification-Vendor': "TigerSystems"
        attributes 'Implementation-Title': commit
        attributes 'Implementation-Version': env
        attributes 'Implementation-Vendor': "MarkusTieger"
    }
}

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")



    // Logging

    implementation("log4j:log4j:1.2.17")


    // GUI

    implementation('com.formdev:flatlaf:2.1')
    implementation('com.formdev:flatlaf-extras:2.1')
    implementation('com.formdev:flatlaf-intellij-themes:2.1')

    // Technical

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation("com.google.code.gson:gson:2.9.0")

    implementation('com.yubico:yubico-validation-client2:3.1.0')

    // Music
    implementation("net.sf.sociaal:freetts:1.2.2")



    // Web

    implementation('org.controlsfx:controlsfx:11.1.1')
    implementation('com.dlsc.formsfx:formsfx-core:11.5.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')

    // implementation("org.eclipse.swt:org.eclipse.swt:[3.0.0,)")
    // implementation("org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.3")
    // implementation files('libs/swt/DJNativeSwing.jar')
    // implementation files('libs/swt/DJNativeSwing-SWT.jar')
    implementation files('libs/swt/swt.all.jar')


    // Media

    // implementation("uk.co.caprica:vlcj:4.7.2")
    implementation("uk.co.caprica:vlcj-javafx:1.0.3")

    // API

    implementation('de.MarkusTieger:tigxa-events:[1.0.0,)')
    implementation('de.MarkusTieger:tigxa-api:[1.0.0,)')
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "Github"
            url = uri("https://maven.pkg.github.com/TigerSystems/tigxa-main")
            // url = uri("https://maven.pkg.github.com/TigerSystems/test-repo")
            credentials {
                username = user
                password = pwd
            }
        }
    }
    publications {
        register("jar", MavenPublication) {
            from(components["java"])
            pom {
                url.set("https://github.com/TigerSystems/tigxa-main.git")
                // url.set("https://github.com/TigerSystems/test-repo.git")
                version = this.getVersion() + (env == null ? "" : ("-" + env))
            }
        }
    }
}


public static void swt(String dependencyOS, String dependencyArch, boolean overwrite){
    String win_x86_64_swt = "https://repo1.maven.org/maven2/org/eclipse/swt/org.eclipse.swt.win32.win32.x86_64/4.3/org.eclipse.swt.win32.win32.x86_64-4.3.jar";

    String linux_x86_64_swt = "https://repo1.maven.org/maven2/org/eclipse/swt/org.eclipse.swt.gtk.linux.x86_64/4.3/org.eclipse.swt.gtk.linux.x86_64-4.3.jar";

    String osx_x86_64_swt = "https://repo1.maven.org/maven2/org/eclipse/swt/org.eclipse.swt.cocoa.macosx.x86_64/4.3/org.eclipse.swt.cocoa.macosx.x86_64-4.3.jar";

    String swt = linux_x86_64_swt;

    if(dependencyOS.toLowerCase().contains("win".toLowerCase())){
        swt = win_x86_64_swt
        if(dependencyArch.equalsIgnoreCase("amd64")) swt = win_x86_64_swt
    }
    if(dependencyOS.toLowerCase().contains("linux".toLowerCase())){
        if(dependencyArch.equalsIgnoreCase("amd64")) swt = linux_x86_64_swt
    }
    if(dependencyOS.toLowerCase().contains("osx".toLowerCase())){
        swt = osx_x86_64_swt
        if(dependencyArch.equalsIgnoreCase("amd64")) swt = osx_x86_64_swt
    }

    boolean download = false

    File target = new File("libs/swt", "swt.all.jar")
    if(!target.exists() || overwrite){
        download = true
    }

    if(download){

        try {

            File swt_target = new File("libs/swt", "swt.jar")
            if(!swt_target.exists()){
                swt_target.createNewFile()
            }

            HttpURLConnection con = (HttpURLConnection) new URL(swt).openConnection()
            con.setRequestProperty("User-Agent", "Tigxa Build Gradle")
            InputStream inputStream = con.getInputStream()
            FileOutputStream outputStream = new FileOutputStream(swt_target)
            int len
            byte[] buffer = new byte[1024]
            while((len = inputStream.read(buffer)) > 0){
                outputStream.write(buffer, 0, len)
            }
            outputStream.flush()
            outputStream.close()
            inputStream.close()

            if(!target.exists()) target.createNewFile()
            outputStream = new FileOutputStream(target)
            ZipOutputStream zos = new ZipOutputStream(outputStream)

            List<String> entries = new ArrayList<>()
            FileInputStream fis = new FileInputStream(new File("libs/swt", "DJNativeSwing.jar"))
            ZipInputStream zis = new ZipInputStream(fis)
            ZipEntry ze = null;

            while((ze = zis.getNextEntry()) != null){
                entries.add(ze.getName())
                if(ze.isDirectory()){
                    zos.putNextEntry(new ZipEntry(ze.getName()))
                    zos.closeEntry()
                } else {
                    zos.putNextEntry(new ZipEntry(ze.getName()))
                    while((len = zis.read(buffer)) > 0){
                        zos.write(buffer, 0, len)
                    }
                    zos.closeEntry()
                }

                zis.closeEntry()
            }
            zis.close()

            fis = new FileInputStream(swt_target)
            zis = new ZipInputStream(fis)

            while((ze = zis.getNextEntry()) != null){
                if(entries.contains(ze.getName())) continue
                if(ze.isDirectory()){
                    zos.putNextEntry(new ZipEntry(ze.getName()))
                    zos.closeEntry()
                } else {
                    zos.putNextEntry(new ZipEntry(ze.getName()))
                    while((len = zis.read(buffer)) > 0){
                        zos.write(buffer, 0, len)
                    }
                    zos.closeEntry()
                }

                zis.closeEntry()
            }
            zis.close()
            zos.finish()
            zos.flush()
            zos.close()
        } catch(Throwable e){
            e.printStackTrace()
        }

    }

}